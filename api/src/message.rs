// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct BubbleRequest {
    // message fields
    pub message: ::protobuf::RepeatedField<BubbleRequest_Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BubbleRequest {
    fn default() -> &'a BubbleRequest {
        <BubbleRequest as ::protobuf::Message>::default_instance()
    }
}

impl BubbleRequest {
    pub fn new() -> BubbleRequest {
        ::std::default::Default::default()
    }

    // repeated .BubbleRequest.Message message = 1;


    pub fn get_message(&self) -> &[BubbleRequest_Message] {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::protobuf::RepeatedField<BubbleRequest_Message>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    pub fn mut_message(&mut self) -> &mut ::protobuf::RepeatedField<BubbleRequest_Message> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::protobuf::RepeatedField<BubbleRequest_Message> {
        ::std::mem::replace(&mut self.message, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BubbleRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.message {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.message {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BubbleRequest {
        BubbleRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BubbleRequest_Message>>(
                "message",
                |m: &BubbleRequest| { &m.message },
                |m: &mut BubbleRequest| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BubbleRequest>(
                "BubbleRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BubbleRequest {
        static instance: ::protobuf::rt::LazyV2<BubbleRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BubbleRequest::new)
    }
}

impl ::protobuf::Clear for BubbleRequest {
    fn clear(&mut self) {
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BubbleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BubbleRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BubbleRequest_Message {
    // message fields
    time: ::protobuf::SingularField<::std::string::String>,
    author: ::std::option::Option<bool>,
    author_name: ::protobuf::SingularField<::std::string::String>,
    author_pic: ::protobuf::SingularField<::std::string::String>,
    author_role: ::protobuf::SingularField<::std::string::String>,
    // message oneof groups
    pub oneof_message: ::std::option::Option<BubbleRequest_Message_oneof_oneof_message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BubbleRequest_Message {
    fn default() -> &'a BubbleRequest_Message {
        <BubbleRequest_Message as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum BubbleRequest_Message_oneof_oneof_message {
    text_message(BubbleRequest_Message_TextMessage),
    photo_message(BubbleRequest_Message_PhotoMessage),
}

impl BubbleRequest_Message {
    pub fn new() -> BubbleRequest_Message {
        ::std::default::Default::default()
    }

    // optional .BubbleRequest.Message.TextMessage text_message = 1;


    pub fn get_text_message(&self) -> &BubbleRequest_Message_TextMessage {
        match self.oneof_message {
            ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::text_message(ref v)) => v,
            _ => <BubbleRequest_Message_TextMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_text_message(&mut self) {
        self.oneof_message = ::std::option::Option::None;
    }

    pub fn has_text_message(&self) -> bool {
        match self.oneof_message {
            ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::text_message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text_message(&mut self, v: BubbleRequest_Message_TextMessage) {
        self.oneof_message = ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::text_message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text_message(&mut self) -> &mut BubbleRequest_Message_TextMessage {
        if let ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::text_message(_)) = self.oneof_message {
        } else {
            self.oneof_message = ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::text_message(BubbleRequest_Message_TextMessage::new()));
        }
        match self.oneof_message {
            ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::text_message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text_message(&mut self) -> BubbleRequest_Message_TextMessage {
        if self.has_text_message() {
            match self.oneof_message.take() {
                ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::text_message(v)) => v,
                _ => panic!(),
            }
        } else {
            BubbleRequest_Message_TextMessage::new()
        }
    }

    // optional .BubbleRequest.Message.PhotoMessage photo_message = 2;


    pub fn get_photo_message(&self) -> &BubbleRequest_Message_PhotoMessage {
        match self.oneof_message {
            ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::photo_message(ref v)) => v,
            _ => <BubbleRequest_Message_PhotoMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_photo_message(&mut self) {
        self.oneof_message = ::std::option::Option::None;
    }

    pub fn has_photo_message(&self) -> bool {
        match self.oneof_message {
            ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::photo_message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_photo_message(&mut self, v: BubbleRequest_Message_PhotoMessage) {
        self.oneof_message = ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::photo_message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_photo_message(&mut self) -> &mut BubbleRequest_Message_PhotoMessage {
        if let ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::photo_message(_)) = self.oneof_message {
        } else {
            self.oneof_message = ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::photo_message(BubbleRequest_Message_PhotoMessage::new()));
        }
        match self.oneof_message {
            ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::photo_message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_photo_message(&mut self) -> BubbleRequest_Message_PhotoMessage {
        if self.has_photo_message() {
            match self.oneof_message.take() {
                ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::photo_message(v)) => v,
                _ => panic!(),
            }
        } else {
            BubbleRequest_Message_PhotoMessage::new()
        }
    }

    // required string time = 3;


    pub fn get_time(&self) -> &str {
        match self.time.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::std::string::String) {
        self.time = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::std::string::String {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::std::string::String {
        self.time.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bool author = 4;


    pub fn get_author(&self) -> bool {
        self.author.unwrap_or(false)
    }
    pub fn clear_author(&mut self) {
        self.author = ::std::option::Option::None;
    }

    pub fn has_author(&self) -> bool {
        self.author.is_some()
    }

    // Param is passed by value, moved
    pub fn set_author(&mut self, v: bool) {
        self.author = ::std::option::Option::Some(v);
    }

    // required string author_name = 5;


    pub fn get_author_name(&self) -> &str {
        match self.author_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_author_name(&mut self) {
        self.author_name.clear();
    }

    pub fn has_author_name(&self) -> bool {
        self.author_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_author_name(&mut self, v: ::std::string::String) {
        self.author_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_author_name(&mut self) -> &mut ::std::string::String {
        if self.author_name.is_none() {
            self.author_name.set_default();
        }
        self.author_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_author_name(&mut self) -> ::std::string::String {
        self.author_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string author_pic = 6;


    pub fn get_author_pic(&self) -> &str {
        match self.author_pic.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_author_pic(&mut self) {
        self.author_pic.clear();
    }

    pub fn has_author_pic(&self) -> bool {
        self.author_pic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_author_pic(&mut self, v: ::std::string::String) {
        self.author_pic = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_author_pic(&mut self) -> &mut ::std::string::String {
        if self.author_pic.is_none() {
            self.author_pic.set_default();
        }
        self.author_pic.as_mut().unwrap()
    }

    // Take field
    pub fn take_author_pic(&mut self) -> ::std::string::String {
        self.author_pic.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string author_role = 7;


    pub fn get_author_role(&self) -> &str {
        match self.author_role.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_author_role(&mut self) {
        self.author_role.clear();
    }

    pub fn has_author_role(&self) -> bool {
        self.author_role.is_some()
    }

    // Param is passed by value, moved
    pub fn set_author_role(&mut self, v: ::std::string::String) {
        self.author_role = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_author_role(&mut self) -> &mut ::std::string::String {
        if self.author_role.is_none() {
            self.author_role.set_default();
        }
        self.author_role.as_mut().unwrap()
    }

    // Take field
    pub fn take_author_role(&mut self) -> ::std::string::String {
        self.author_role.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for BubbleRequest_Message {
    fn is_initialized(&self) -> bool {
        if self.time.is_none() {
            return false;
        }
        if self.author.is_none() {
            return false;
        }
        if self.author_name.is_none() {
            return false;
        }
        if let Some(BubbleRequest_Message_oneof_oneof_message::text_message(ref v)) = self.oneof_message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(BubbleRequest_Message_oneof_oneof_message::photo_message(ref v)) = self.oneof_message {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.oneof_message = ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::text_message(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.oneof_message = ::std::option::Option::Some(BubbleRequest_Message_oneof_oneof_message::photo_message(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.time)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.author = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.author_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.author_pic)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.author_role)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.time.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.author {
            my_size += 2;
        }
        if let Some(ref v) = self.author_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(ref v) = self.author_pic.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(ref v) = self.author_role.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let ::std::option::Option::Some(ref v) = self.oneof_message {
            match v {
                &BubbleRequest_Message_oneof_oneof_message::text_message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &BubbleRequest_Message_oneof_oneof_message::photo_message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.time.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.author {
            os.write_bool(4, v)?;
        }
        if let Some(ref v) = self.author_name.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(ref v) = self.author_pic.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(ref v) = self.author_role.as_ref() {
            os.write_string(7, &v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.oneof_message {
            match v {
                &BubbleRequest_Message_oneof_oneof_message::text_message(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &BubbleRequest_Message_oneof_oneof_message::photo_message(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BubbleRequest_Message {
        BubbleRequest_Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BubbleRequest_Message_TextMessage>(
                "text_message",
                BubbleRequest_Message::has_text_message,
                BubbleRequest_Message::get_text_message,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BubbleRequest_Message_PhotoMessage>(
                "photo_message",
                BubbleRequest_Message::has_photo_message,
                BubbleRequest_Message::get_photo_message,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "time",
                |m: &BubbleRequest_Message| { &m.time },
                |m: &mut BubbleRequest_Message| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "author",
                |m: &BubbleRequest_Message| { &m.author },
                |m: &mut BubbleRequest_Message| { &mut m.author },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "author_name",
                |m: &BubbleRequest_Message| { &m.author_name },
                |m: &mut BubbleRequest_Message| { &mut m.author_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "author_pic",
                |m: &BubbleRequest_Message| { &m.author_pic },
                |m: &mut BubbleRequest_Message| { &mut m.author_pic },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "author_role",
                |m: &BubbleRequest_Message| { &m.author_role },
                |m: &mut BubbleRequest_Message| { &mut m.author_role },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BubbleRequest_Message>(
                "BubbleRequest.Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BubbleRequest_Message {
        static instance: ::protobuf::rt::LazyV2<BubbleRequest_Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BubbleRequest_Message::new)
    }
}

impl ::protobuf::Clear for BubbleRequest_Message {
    fn clear(&mut self) {
        self.oneof_message = ::std::option::Option::None;
        self.oneof_message = ::std::option::Option::None;
        self.time.clear();
        self.author = ::std::option::Option::None;
        self.author_name.clear();
        self.author_pic.clear();
        self.author_role.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BubbleRequest_Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BubbleRequest_Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BubbleRequest_Message_TextMessage {
    // message fields
    text: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BubbleRequest_Message_TextMessage {
    fn default() -> &'a BubbleRequest_Message_TextMessage {
        <BubbleRequest_Message_TextMessage as ::protobuf::Message>::default_instance()
    }
}

impl BubbleRequest_Message_TextMessage {
    pub fn new() -> BubbleRequest_Message_TextMessage {
        ::std::default::Default::default()
    }

    // required string text = 1;


    pub fn get_text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text.set_default();
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for BubbleRequest_Message_TextMessage {
    fn is_initialized(&self) -> bool {
        if self.text.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.text.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BubbleRequest_Message_TextMessage {
        BubbleRequest_Message_TextMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &BubbleRequest_Message_TextMessage| { &m.text },
                |m: &mut BubbleRequest_Message_TextMessage| { &mut m.text },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BubbleRequest_Message_TextMessage>(
                "BubbleRequest.Message.TextMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BubbleRequest_Message_TextMessage {
        static instance: ::protobuf::rt::LazyV2<BubbleRequest_Message_TextMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BubbleRequest_Message_TextMessage::new)
    }
}

impl ::protobuf::Clear for BubbleRequest_Message_TextMessage {
    fn clear(&mut self) {
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BubbleRequest_Message_TextMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BubbleRequest_Message_TextMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BubbleRequest_Message_PhotoMessage {
    // message fields
    photo_text: ::protobuf::SingularField<::std::string::String>,
    photo: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BubbleRequest_Message_PhotoMessage {
    fn default() -> &'a BubbleRequest_Message_PhotoMessage {
        <BubbleRequest_Message_PhotoMessage as ::protobuf::Message>::default_instance()
    }
}

impl BubbleRequest_Message_PhotoMessage {
    pub fn new() -> BubbleRequest_Message_PhotoMessage {
        ::std::default::Default::default()
    }

    // optional string photo_text = 1;


    pub fn get_photo_text(&self) -> &str {
        match self.photo_text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_photo_text(&mut self) {
        self.photo_text.clear();
    }

    pub fn has_photo_text(&self) -> bool {
        self.photo_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_photo_text(&mut self, v: ::std::string::String) {
        self.photo_text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_photo_text(&mut self) -> &mut ::std::string::String {
        if self.photo_text.is_none() {
            self.photo_text.set_default();
        }
        self.photo_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_photo_text(&mut self) -> ::std::string::String {
        self.photo_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string photo = 2;


    pub fn get_photo(&self) -> &str {
        match self.photo.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_photo(&mut self) {
        self.photo.clear();
    }

    pub fn has_photo(&self) -> bool {
        self.photo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_photo(&mut self, v: ::std::string::String) {
        self.photo = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_photo(&mut self) -> &mut ::std::string::String {
        if self.photo.is_none() {
            self.photo.set_default();
        }
        self.photo.as_mut().unwrap()
    }

    // Take field
    pub fn take_photo(&mut self) -> ::std::string::String {
        self.photo.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for BubbleRequest_Message_PhotoMessage {
    fn is_initialized(&self) -> bool {
        if self.photo.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.photo_text)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.photo)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.photo_text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.photo.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.photo_text.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.photo.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BubbleRequest_Message_PhotoMessage {
        BubbleRequest_Message_PhotoMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "photo_text",
                |m: &BubbleRequest_Message_PhotoMessage| { &m.photo_text },
                |m: &mut BubbleRequest_Message_PhotoMessage| { &mut m.photo_text },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "photo",
                |m: &BubbleRequest_Message_PhotoMessage| { &m.photo },
                |m: &mut BubbleRequest_Message_PhotoMessage| { &mut m.photo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BubbleRequest_Message_PhotoMessage>(
                "BubbleRequest.Message.PhotoMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BubbleRequest_Message_PhotoMessage {
        static instance: ::protobuf::rt::LazyV2<BubbleRequest_Message_PhotoMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BubbleRequest_Message_PhotoMessage::new)
    }
}

impl ::protobuf::Clear for BubbleRequest_Message_PhotoMessage {
    fn clear(&mut self) {
        self.photo_text.clear();
        self.photo.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BubbleRequest_Message_PhotoMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BubbleRequest_Message_PhotoMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13proto/message.proto\"\xe8\x03\n\rBubbleRequest\x120\n\x07message\
    \x18\x01\x20\x03(\x0b2\x16.BubbleRequest.MessageR\x07message\x1a\xa4\x03\
    \n\x07Message\x12G\n\x0ctext_message\x18\x01\x20\x01(\x0b2\".BubbleReque\
    st.Message.TextMessageH\0R\x0btextMessage\x12J\n\rphoto_message\x18\x02\
    \x20\x01(\x0b2#.BubbleRequest.Message.PhotoMessageH\0R\x0cphotoMessage\
    \x12\x12\n\x04time\x18\x03\x20\x02(\tR\x04time\x12\x16\n\x06author\x18\
    \x04\x20\x02(\x08R\x06author\x12\x1f\n\x0bauthor_name\x18\x05\x20\x02(\t\
    R\nauthorName\x12\x1d\n\nauthor_pic\x18\x06\x20\x01(\tR\tauthorPic\x12\
    \x1f\n\x0bauthor_role\x18\x07\x20\x01(\tR\nauthorRole\x1a!\n\x0bTextMess\
    age\x12\x12\n\x04text\x18\x01\x20\x02(\tR\x04text\x1aC\n\x0cPhotoMessage\
    \x12\x1d\n\nphoto_text\x18\x01\x20\x01(\tR\tphotoText\x12\x14\n\x05photo\
    \x18\x02\x20\x02(\tR\x05photoB\x0f\n\roneof_messageJ\xff\x07\n\x06\x12\
    \x04\0\0\x1a\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\
    \x02\0\x1a\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x15\n\x0c\n\x04\x04\0\
    \x03\0\x12\x04\x03\x02\x17\x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x03\n\
    \x11\n\x0e\n\x06\x04\0\x03\0\x03\0\x12\x04\x04\x04\x06\x05\n\x0e\n\x07\
    \x04\0\x03\0\x03\0\x01\x12\x03\x04\x0c\x17\n\x0f\n\x08\x04\0\x03\0\x03\0\
    \x02\0\x12\x03\x05\x06\x1f\n\x10\n\t\x04\0\x03\0\x03\0\x02\0\x04\x12\x03\
    \x05\x06\x0e\n\x10\n\t\x04\0\x03\0\x03\0\x02\0\x05\x12\x03\x05\x0f\x15\n\
    \x10\n\t\x04\0\x03\0\x03\0\x02\0\x01\x12\x03\x05\x16\x1a\n\x10\n\t\x04\0\
    \x03\0\x03\0\x02\0\x03\x12\x03\x05\x1d\x1e\n\x0e\n\x06\x04\0\x03\0\x03\
    \x01\x12\x04\x08\x04\x0b\x05\n\x0e\n\x07\x04\0\x03\0\x03\x01\x01\x12\x03\
    \x08\x0c\x18\n\x0f\n\x08\x04\0\x03\0\x03\x01\x02\0\x12\x03\t\x06%\n\x10\
    \n\t\x04\0\x03\0\x03\x01\x02\0\x04\x12\x03\t\x06\x0e\n\x10\n\t\x04\0\x03\
    \0\x03\x01\x02\0\x05\x12\x03\t\x0f\x15\n\x10\n\t\x04\0\x03\0\x03\x01\x02\
    \0\x01\x12\x03\t\x16\x20\n\x10\n\t\x04\0\x03\0\x03\x01\x02\0\x03\x12\x03\
    \t#$\n\x0f\n\x08\x04\0\x03\0\x03\x01\x02\x01\x12\x03\n\x06\x20\n\x10\n\t\
    \x04\0\x03\0\x03\x01\x02\x01\x04\x12\x03\n\x06\x0e\n\x10\n\t\x04\0\x03\0\
    \x03\x01\x02\x01\x05\x12\x03\n\x0f\x15\n\x10\n\t\x04\0\x03\0\x03\x01\x02\
    \x01\x01\x12\x03\n\x16\x1b\n\x10\n\t\x04\0\x03\0\x03\x01\x02\x01\x03\x12\
    \x03\n\x1e\x1f\n\x0e\n\x06\x04\0\x03\0\x08\0\x12\x04\r\x04\x10\x05\n\x0e\
    \n\x07\x04\0\x03\0\x08\0\x01\x12\x03\r\n\x17\n\r\n\x06\x04\0\x03\0\x02\0\
    \x12\x03\x0e\x06#\n\x0e\n\x07\x04\0\x03\0\x02\0\x06\x12\x03\x0e\x06\x11\
    \n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x0e\x12\x1e\n\x0e\n\x07\x04\0\
    \x03\0\x02\0\x03\x12\x03\x0e!\"\n\r\n\x06\x04\0\x03\0\x02\x01\x12\x03\
    \x0f\x06%\n\x0e\n\x07\x04\0\x03\0\x02\x01\x06\x12\x03\x0f\x06\x12\n\x0e\
    \n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\x0f\x13\x20\n\x0e\n\x07\x04\0\x03\
    \0\x02\x01\x03\x12\x03\x0f#$\n\r\n\x06\x04\0\x03\0\x02\x02\x12\x03\x12\
    \x04\x1d\n\x0e\n\x07\x04\0\x03\0\x02\x02\x04\x12\x03\x12\x04\x0c\n\x0e\n\
    \x07\x04\0\x03\0\x02\x02\x05\x12\x03\x12\r\x13\n\x0e\n\x07\x04\0\x03\0\
    \x02\x02\x01\x12\x03\x12\x14\x18\n\x0e\n\x07\x04\0\x03\0\x02\x02\x03\x12\
    \x03\x12\x1b\x1c\n\r\n\x06\x04\0\x03\0\x02\x03\x12\x03\x13\x04\x1d\n\x0e\
    \n\x07\x04\0\x03\0\x02\x03\x04\x12\x03\x13\x04\x0c\n\x0e\n\x07\x04\0\x03\
    \0\x02\x03\x05\x12\x03\x13\r\x11\n\x0e\n\x07\x04\0\x03\0\x02\x03\x01\x12\
    \x03\x13\x12\x18\n\x0e\n\x07\x04\0\x03\0\x02\x03\x03\x12\x03\x13\x1b\x1c\
    \n\r\n\x06\x04\0\x03\0\x02\x04\x12\x03\x14\x04$\n\x0e\n\x07\x04\0\x03\0\
    \x02\x04\x04\x12\x03\x14\x04\x0c\n\x0e\n\x07\x04\0\x03\0\x02\x04\x05\x12\
    \x03\x14\r\x13\n\x0e\n\x07\x04\0\x03\0\x02\x04\x01\x12\x03\x14\x14\x1f\n\
    \x0e\n\x07\x04\0\x03\0\x02\x04\x03\x12\x03\x14\"#\n\r\n\x06\x04\0\x03\0\
    \x02\x05\x12\x03\x15\x04#\n\x0e\n\x07\x04\0\x03\0\x02\x05\x04\x12\x03\
    \x15\x04\x0c\n\x0e\n\x07\x04\0\x03\0\x02\x05\x05\x12\x03\x15\r\x13\n\x0e\
    \n\x07\x04\0\x03\0\x02\x05\x01\x12\x03\x15\x14\x1e\n\x0e\n\x07\x04\0\x03\
    \0\x02\x05\x03\x12\x03\x15!\"\n\r\n\x06\x04\0\x03\0\x02\x06\x12\x03\x16\
    \x04$\n\x0e\n\x07\x04\0\x03\0\x02\x06\x04\x12\x03\x16\x04\x0c\n\x0e\n\
    \x07\x04\0\x03\0\x02\x06\x05\x12\x03\x16\r\x13\n\x0e\n\x07\x04\0\x03\0\
    \x02\x06\x01\x12\x03\x16\x14\x1f\n\x0e\n\x07\x04\0\x03\0\x02\x06\x03\x12\
    \x03\x16\"#\n\x0b\n\x04\x04\0\x02\0\x12\x03\x19\x02\x1f\n\x0c\n\x05\x04\
    \0\x02\0\x04\x12\x03\x19\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x19\
    \x0b\x12\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x19\x13\x1a\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x19\x1d\x1e\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
